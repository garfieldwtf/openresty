name: PR Test - OpenResty Build Validation

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  OPENRESTY_VERSION: 1.25.3.2
  NGINX_VERSION: 1.9.7

jobs:
  validate-dockerfile:
    name: Validate Dockerfile
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Dockerfile syntax
      run: |
        echo "üîç Validating Dockerfile syntax..."
        docker build --no-cache -t openresty-pr-test .
        echo "‚úÖ Dockerfile builds successfully"

    - name: Check required files
      run: |
        echo "üìÅ Checking required files..."
        required_files=("Dockerfile" "nginx.conf")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done

    - name: Test OpenResty and Nginx versions
      run: |
        echo "üîç Testing OpenResty and Nginx versions..."
        docker build \
          --build-arg OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }} \
          --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
          -t openresty-version-test .
        
        # Test version output
        VERSION_OUTPUT=$(docker run --rm openresty-version-test /usr/local/openresty/nginx/sbin/nginx -v 2>&1)
        echo "Version output: $VERSION_OUTPUT"
        
        if echo "$VERSION_OUTPUT" | grep -q "openresty/${{ env.OPENRESTY_VERSION }}"; then
          echo "‚úÖ OpenResty version matches: ${{ env.OPENRESTY_VERSION }}"
        else
          echo "‚ùå OpenResty version mismatch"
          exit 1
        fi
        
        if echo "$VERSION_OUTPUT" | grep -q "nginx/${{ env.NGINX_VERSION }}"; then
          echo "‚úÖ Nginx version matches: ${{ env.NGINX_VERSION }}"
        else
          echo "‚ùå Nginx version mismatch"
          exit 1
        fi

  test-multi-platform:
    name: Test Multi-Platform Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: amd64,arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test multi-platform build
      run: |
        echo "üèóÔ∏è Testing multi-platform build..."
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --build-arg OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }} \
          --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
          --load \
          -t openresty-multi-test .
        echo "‚úÖ Multi-platform build successful"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      run: |
        docker build \
          --build-arg OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }} \
          --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
          -t openresty-security-test .

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'openresty-security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  functionality-test:
    name: Functionality Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      run: |
        docker build \
          --build-arg OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }} \
          --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
          -t openresty-functional-test .

    - name: Test nginx configuration
      run: |
        echo "üîß Testing nginx configuration..."
        docker run --rm openresty-functional-test /usr/local/openresty/nginx/sbin/nginx -t
        echo "‚úÖ Nginx configuration test passed"

    - name: Test LuaJIT availability
      run: |
        echo "üîß Testing LuaJIT..."
        docker run --rm openresty-functional-test /usr/local/openresty/luajit/bin/luajit -v
        echo "‚úÖ LuaJIT test passed"

    - name: Test basic HTTP functionality
      run: |
        echo "üåê Testing basic HTTP functionality..."
        # Start container in background
        CONTAINER_ID=$(docker run -d -p 8080:80 openresty-functional-test)
        sleep 5
        
        # Test if nginx is responding
        if curl -f http://localhost:8080 > /dev/null 2>&1; then
          echo "‚úÖ HTTP functionality test passed"
        else
          echo "‚ùå HTTP functionality test failed"
          docker logs $CONTAINER_ID
          exit 1
        fi
        
        # Cleanup
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID

  pr-summary:
    name: PR Test Summary
    runs-on: ubuntu-latest
    needs: [validate-dockerfile, test-multi-platform, security-scan, functionality-test]
    if: always()
    
    steps:
    - name: PR Test Summary
      run: |
        echo "üìä PR Test Summary for OpenResty"
        echo ""
        echo "‚úÖ All tests completed for PR #${{ github.event.pull_request.number }}"
        echo ""
        echo "üîç Tests performed:"
        echo "   ‚Ä¢ Dockerfile validation and build"
        echo "   ‚Ä¢ Multi-platform build capability"
        echo "   ‚Ä¢ Security vulnerability scanning"
        echo "   ‚Ä¢ OpenResty/Nginx version verification"
        echo "   ‚Ä¢ Configuration validation"
        echo "   ‚Ä¢ Basic functionality testing"
        echo ""
        echo "‚ö° Version Information:"
        echo "   ‚Ä¢ OpenResty: ${{ env.OPENRESTY_VERSION }}"
        echo "   ‚Ä¢ Nginx: ${{ env.NGINX_VERSION }}"
        echo ""
        echo "üìù Note: This is a test build. No images are pushed to registries."
