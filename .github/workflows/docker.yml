name: Build and Push Multi-Arch OpenResty to GHCR, Docker Hub, and Quay.io

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_QUAY: quay.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: garfieldwtf/openresty
  QUAY_IMAGE_NAME: garfieldwtf/openresty
  OPENRESTY_VERSION: 1.25.3.2
  NGINX_VERSION: 1.9.7

jobs:
  test:
    name: Test Dockerfile Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Dockerfile build
      run: |
        test -f Dockerfile || exit 1
        echo "✓ Dockerfile present"
        
        # Test basic build with correct versions
        docker build \
          --build-arg OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }} \
          --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
          -t openresty-test .
        
        # Test that OpenResty and Nginx versions are correct
        echo "Testing OpenResty and Nginx versions..."
        docker run --rm openresty-test /usr/local/openresty/nginx/sbin/nginx -v 2>&1 | grep -q "openresty/${{ env.OPENRESTY_VERSION }}" && echo "✅ OpenResty version correct" || echo "❌ OpenResty version mismatch"
        docker run --rm openresty-test /usr/local/openresty/nginx/sbin/nginx -v 2>&1 | grep -q "nginx/${{ env.NGINX_VERSION }}" && echo "✅ Nginx version correct" || echo "❌ Nginx version mismatch"

  build-ghcr:
    name: Build for GHCR (All Tags)
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: 386,amd64,arm64,arm,riscv64,ppc64le,s390x

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for GHCR
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ env.OPENRESTY_VERSION }},enable={{is_default_branch}}
          type=raw,value=${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }},enable={{is_default_branch}}

    - name: Build and push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64/v8,
          linux/ppc64le,
          linux/riscv64,
          linux/s390x
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        build-args: |
          OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }}
          NGINX_VERSION=${{ env.NGINX_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-dockerhub-quay:
    name: Build for Docker Hub and Quay.io (Specific Tags)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: 386,amd64,arm64,arm,riscv64,ppc64le,s390x

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Build and push specific tags to both registries
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64/v8,
          linux/ppc64le,
          linux/riscv64,
          linux/s390x
        push: true
        tags: |
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-386
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-amd64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-armv6
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-armv7
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-arm64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-ppc64le
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-riscv64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-s390x
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:latest
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-386
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-amd64
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-armv6
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-armv7
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-arm64
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-ppc64le
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-riscv64
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:${{ env.OPENRESTY_VERSION }}-s390x
        build-args: |
          OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }}
          NGINX_VERSION=${{ env.NGINX_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  verify:
    name: Verify All Registries and Architectures
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Verify all registries and tags
      run: |
        # Define tags to verify
        tags=("latest" "${{ env.OPENRESTY_VERSION }}" "${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}" "${{ env.OPENRESTY_VERSION }}-386" "${{ env.OPENRESTY_VERSION }}-amd64" "${{ env.OPENRESTY_VERSION }}-armv6" "${{ env.OPENRESTY_VERSION }}-armv7" "${{ env.OPENRESTY_VERSION }}-arm64" "${{ env.OPENRESTY_VERSION }}-ppc64le" "${{ env.OPENRESTY_VERSION }}-riscv64" "${{ env.OPENRESTY_VERSION }}-s390x")
        
        # Define platform mapping for each tag
        declare -A tag_platforms=(
          ["latest"]="linux/amd64"
          ["${{ env.OPENRESTY_VERSION }}"]="linux/amd64"
          ["${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}"]="linux/amd64"
          ["${{ env.OPENRESTY_VERSION }}-386"]="linux/386"
          ["${{ env.OPENRESTY_VERSION }}-amd64"]="linux/amd64"
          ["${{ env.OPENRESTY_VERSION }}-armv6"]="linux/arm/v6"
          ["${{ env.OPENRESTY_VERSION }}-armv7"]="linux/arm/v7"
          ["${{ env.OPENRESTY_VERSION }}-arm64"]="linux/arm64/v8"
          ["${{ env.OPENRESTY_VERSION }}-ppc64le"]="linux/ppc64le"
          ["${{ env.OPENRESTY_VERSION }}-riscv64"]="linux/riscv64"
          ["${{ env.OPENRESTY_VERSION }}-s390x"]="linux/s390x"
        )

        declare -A expected_arch=(
          ["latest"]="amd64"
          ["${{ env.OPENRESTY_VERSION }}"]="amd64"
          ["${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}"]="amd64"
          ["${{ env.OPENRESTY_VERSION }}-386"]="386"
          ["${{ env.OPENRESTY_VERSION }}-amd64"]="amd64"
          ["${{ env.OPENRESTY_VERSION }}-armv6"]="arm"
          ["${{ env.OPENRESTY_VERSION }}-armv7"]="arm"
          ["${{ env.OPENRESTY_VERSION }}-arm64"]="arm64"
          ["${{ env.OPENRESTY_VERSION }}-ppc64le"]="ppc64le"
          ["${{ env.OPENRESTY_VERSION }}-riscv64"]="riscv64"
          ["${{ env.OPENRESTY_VERSION }}-s390x"]="s390x"
        )

        # Registries to verify
        registries=(
          ["dockerhub"]="${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}"
          ["quay"]="${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}"
        )

        for registry_name in "${!registries[@]}"; do
          registry_base="${registries[$registry_name]}"
          echo "=== Verifying registry: $registry_name ==="
          
          for tag in "${tags[@]}"; do
            IMAGE_TAG="${registry_base}:${tag}"
            platform="${tag_platforms[$tag]}"
            expected="${expected_arch[$tag]}"
            
            echo "🔍 Testing $IMAGE_TAG on platform $platform..."
            
            if docker pull --platform "$platform" "$IMAGE_TAG"; then
              # Verify architecture
              ARCH_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Architecture}}')
              OS_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Os}}')
              
              if [ "$ARCH_RESULT" == "$expected" ]; then
                echo "✅ $registry_name/$tag: Architecture=$ARCH_RESULT (expected: $expected), OS=$OS_RESULT"
                
                # Additional OpenResty version verification
                if [[ "$tag" == *"${{ env.OPENRESTY_VERSION }}"* ]] || [[ "$tag" == "latest" ]]; then
                  VERSION_RESULT=$(docker run --rm --platform "$platform" "$IMAGE_TAG" /usr/local/openresty/nginx/sbin/nginx -v 2>&1 || true)
                  if echo "$VERSION_RESULT" | grep -q "openresty/${{ env.OPENRESTY_VERSION }}"; then
                    echo "✅ OpenResty version verified: ${{ env.OPENRESTY_VERSION }}"
                  else
                    echo "❌ OpenResty version mismatch in $tag"
                    exit 1
                  fi
                  
                  if echo "$VERSION_RESULT" | grep -q "nginx/${{ env.NGINX_VERSION }}"; then
                    echo "✅ Nginx version verified: ${{ env.NGINX_VERSION }}"
                  else
                    echo "❌ Nginx version mismatch in $tag"
                    exit 1
                  fi
                fi
              else
                echo "❌ Architecture mismatch for $registry_name/$tag: got $ARCH_RESULT, expected $expected"
                exit 1
              fi
            else
              echo "❌ Failed to pull $tag from $registry_name"
              exit 1
            fi
            echo ""
          done
        done

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      run: |
        # Scan main tags from all registries
        TAGS=("latest" "${{ env.OPENRESTY_VERSION }}" "${{ env.OPENRESTY_VERSION }}-amd64" "${{ env.OPENRESTY_VERSION }}-arm64")
        REGISTRIES=(
          "${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}"
          "${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}"
        )
        
        for registry in "${REGISTRIES[@]}"; do
          for tag in "${TAGS[@]}"; do
            echo "🔍 Scanning: $registry:$tag"
            docker run --rm aquasec/trivy:latest image \
              --severity HIGH,CRITICAL \
              --format table \
              --exit-code 0 \
              "${registry}:${tag}" || echo "Scan completed for ${registry}:${tag}"
          done
        done

  manifest:
    name: Create Multi-Architecture Manifests
    runs-on: ubuntu-latest
    needs: build-dockerhub-quay
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Create multi-architecture manifests
      run: |
        # Function to create multi-arch manifest for a registry
        create_multiarch_manifest() {
          local registry=$1
          local image_name=$2
          local openresty_version=$3
          local nginx_version=$4
          
          echo "Creating multi-architecture manifests for $registry/$image_name"
          
          # Create manifest list for 'latest' tag with all architectures
          docker manifest create $registry/$image_name:latest \
            --amend $registry/$image_name:$openresty_version-386 \
            --amend $registry/$image_name:$openresty_version-amd64 \
            --amend $registry/$image_name:$openresty_version-armv6 \
            --amend $registry/$image_name:$openresty_version-armv7 \
            --amend $registry/$image_name:$openresty_version-arm64 \
            --amend $registry/$image_name:$openresty_version-ppc64le \
            --amend $registry/$image_name:$openresty_version-riscv64 \
            --amend $registry/$image_name:$openresty_version-s390x
          
          # Create manifest list for version tag with all architectures
          docker manifest create $registry/$image_name:$openresty_version \
            --amend $registry/$image_name:$openresty_version-386 \
            --amend $registry/$image_name:$openresty_version-amd64 \
            --amend $registry/$image_name:$openresty_version-armv6 \
            --amend $registry/$image_name:$openresty_version-armv7 \
            --amend $registry/$image_name:$openresty_version-arm64 \
            --amend $registry/$image_name:$openresty_version-ppc64le \
            --amend $registry/$image_name:$openresty_version-riscv64 \
            --amend $registry/$image_name:$openresty_version-s390x
          
          # Create manifest list for version+nginx tag with all architectures
          docker manifest create $registry/$image_name:$openresty_version-nginx-$nginx_version \
            --amend $registry/$image_name:$openresty_version-386 \
            --amend $registry/$image_name:$openresty_version-amd64 \
            --amend $registry/$image_name:$openresty_version-armv6 \
            --amend $registry/$image_name:$openresty_version-armv7 \
            --amend $registry/$image_name:$openresty_version-arm64 \
            --amend $registry/$image_name:$openresty_version-ppc64le \
            --amend $registry/$image_name:$openresty_version-riscv64 \
            --amend $registry/$image_name:$openresty_version-s390x
          
          # Push the manifests
          docker manifest push $registry/$image_name:latest
          docker manifest push $registry/$image_name:$openresty_version
          docker manifest push $registry/$image_name:$openresty_version-nginx-$nginx_version
          
          echo "✅ Multi-arch manifests created for $registry/$image_name"
        }

        # Create manifests for both registries
        create_multiarch_manifest "${{ env.REGISTRY_DOCKERHUB }}" "${{ env.DOCKERHUB_IMAGE_NAME }}" "${{ env.OPENRESTY_VERSION }}" "${{ env.NGINX_VERSION }}"
        create_multiarch_manifest "${{ env.REGISTRY_QUAY }}" "${{ env.QUAY_IMAGE_NAME }}" "${{ env.OPENRESTY_VERSION }}" "${{ env.NGINX_VERSION }}"

    - name: Verify manifests
      run: |
        # Verify the multi-arch manifests were created correctly
        echo "Verifying multi-architecture manifests..."
        
        manifests=(
          "latest"
          "${{ env.OPENRESTY_VERSION }}"
          "${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}"
        )
        
        for manifest in "${manifests[@]}"; do
          # Check Docker Hub manifest
          docker manifest inspect ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:$manifest > /dev/null
          if [ $? -eq 0 ]; then
            echo "✅ Docker Hub $manifest manifest verified"
          else
            echo "❌ Docker Hub $manifest manifest failed"
            exit 1
          fi
          
          # Check Quay.io manifest
          docker manifest inspect ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:$manifest > /dev/null
          if [ $? -eq 0 ]; then
            echo "✅ Quay.io $manifest manifest verified"
          else
            echo "❌ Quay.io $manifest manifest failed"
            exit 1
          fi
        done

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          Dockerfile
          README.md
          nginx.conf
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay, verify, scan, manifest]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Build Summary
      run: |
        echo "🎉 Multi-architecture OpenResty build completed!"
        echo ""
        echo "📦 Available Registries and Tags:"
        echo ""
        echo "🚀 Docker Hub:"
        echo "   • garfieldwtf/openresty:latest                                  (multi-arch)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}                       (multi-arch)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}   (multi-arch)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-386                   (32-bit Intel/AMD)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-amd64                 (64-bit Intel/AMD)" 
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-armv6                 (ARMv6 devices)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-armv7                 (ARMv7 devices)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-arm64                 (ARM 64-bit)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-ppc64le               (PowerPC 64-bit LE)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-riscv64               (RISC-V 64-bit)"
        echo "   • garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-s390x                 (IBM System/390)"
        echo ""
        echo "🔮 Quay.io:"
        echo "   • quay.io/garfieldwtf/openresty:latest"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }}"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-386"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-amd64"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-armv6"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-armv7"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-arm64"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-ppc64le"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-riscv64"
        echo "   • quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-s390x"
        echo ""
        echo "📚 GHCR (GitHub Container Registry):"
        echo "   • All tags including commits, branches, and versions"
        echo ""
        echo "⚡ Version Information:"
        echo "   • OpenResty: ${{ env.OPENRESTY_VERSION }}"
        echo "   • Nginx: ${{ env.NGINX_VERSION }}"
        echo ""
        echo "🔍 Usage Examples:"
        echo "   docker pull garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-arm64"
        echo "   docker pull quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-ppc64le"
        echo "   docker run --platform linux/riscv64 quay.io/garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-riscv64"
        echo ""
        echo "🌐 Multi-Arch Usage:"
        echo "   docker pull garfieldwtf/openresty:latest          # Automatically picks correct architecture"
        echo "   docker pull garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}           # Version-specific multi-arch"
        echo "   docker pull garfieldwtf/openresty:${{ env.OPENRESTY_VERSION }}-nginx-${{ env.NGINX_VERSION }} # Full version multi-arch"
