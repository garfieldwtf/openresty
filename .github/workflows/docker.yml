name: Build and Push Multi-Arch OpenResty to GHCR, Docker Hub, and Quay.io

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_QUAY: quay.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: garfieldwtf/openresty
  QUAY_IMAGE_NAME: garfieldwtf/openresty
  OPENRESTY_VERSION: 1.25.3.2
  NGINX_VERSION: 1.9.7

jobs:
  test:
    name: Test Dockerfile Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test required files exist
      run: |
        test -f Dockerfile || exit 1
        test -f nginx.conf || exit 1
        echo "‚úì All required files present"

    - name: Test Dockerfile build
      run: |
        docker build -t openresty-test .

  build-ghcr:
    name: Build for GHCR (All Tags)
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,arm,386,amd64,ppc64le

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for GHCR
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64,
          linux/ppc64le
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        build-args: |
          OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }}
          NGINX_VERSION=${{ env.NGINX_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-dockerhub-quay:
    name: Build for Docker Hub and Quay.io (Specific Tags)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64,arm,386,amd64,ppc64le

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Build and push specific tags to both registries
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: |
          linux/386,
          linux/amd64,
          linux/arm/v6,
          linux/arm/v7,
          linux/arm64,
          linux/ppc64le
        push: true
        tags: |
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:latest
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:386
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:x64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:ppc64
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:armv7
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:latest
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:386
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:x64
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:ppc64
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:armv7
          ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:arm
        build-args: |
          OPENRESTY_VERSION=${{ env.OPENRESTY_VERSION }}
          NGINX_VERSION=${{ env.NGINX_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  verify:
    name: Verify All Registries and Architectures
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Verify all registries and tags
      run: |
        # Define tags to verify
        tags=("latest" "386" "x64" "ppc64" "armv7" "arm")
        
        # Define platform mapping for each tag
        declare -A tag_platforms=(
          ["latest"]="linux/amd64"
          ["386"]="linux/386"
          ["x64"]="linux/amd64"
          ["ppc64"]="linux/ppc64le"
          ["armv7"]="linux/arm/v7"
          ["arm"]="linux/arm/v7"
        )

        declare -A expected_arch=(
          ["latest"]="amd64"
          ["386"]="386"
          ["x64"]="amd64"
          ["ppc64"]="ppc64le"
          ["armv7"]="arm"
          ["arm"]="arm"
        )

        # Registries to verify
        registries=(
          ["dockerhub"]="${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}"
          ["quay"]="${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}"
        )

        for registry_name in "${!registries[@]}"; do
          registry_base="${registries[$registry_name]}"
          echo "=== Verifying registry: $registry_name ==="
          
          for tag in "${tags[@]}"; do
            IMAGE_TAG="${registry_base}:${tag}"
            platform="${tag_platforms[$tag]}"
            expected="${expected_arch[$tag]}"
            
            echo "üîç Testing $IMAGE_TAG on platform $platform..."
            
            if docker pull --platform "$platform" "$IMAGE_TAG"; then
              # Verify architecture
              ARCH_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Architecture}}')
              OS_RESULT=$(docker image inspect "$IMAGE_TAG" --format='{{.Os}}')
              
              if [ "$ARCH_RESULT" == "$expected" ]; then
                echo "‚úÖ $registry_name/$tag: Architecture=$ARCH_RESULT (expected: $expected), OS=$OS_RESULT"
                
                # Test OpenResty functionality
                echo "üß™ Testing OpenResty functionality..."
                if docker run --rm --platform "$platform" "$IMAGE_TAG" /usr/local/openresty/nginx/sbin/nginx -v; then
                  echo "‚úÖ OpenResty test passed for $tag"
                else
                  echo "‚ùå OpenResty test failed for $tag"
                  exit 1
                fi
              else
                echo "‚ùå Architecture mismatch for $registry_name/$tag: got $ARCH_RESULT, expected $expected"
                exit 1
              fi
            else
              echo "‚ùå Failed to pull $tag from $registry_name"
              exit 1
            fi
            echo ""
          done
        done

    - name: Verify no commit tags exist in Docker Hub or Quay.io
      run: |
        # Test that commit tags don't exist in Docker Hub or Quay.io
        set +e
        
        # Docker Hub
        docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}:sha-0000000 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "‚ùå Commit tags should not exist in Docker Hub"
          exit 1
        else
          echo "‚úÖ No commit tags found in Docker Hub (as expected)"
        fi
        
        # Quay.io
        docker pull ${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}:sha-0000000 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "‚ùå Commit tags should not exist in Quay.io"
          exit 1
        else
          echo "‚úÖ No commit tags found in Quay.io (as expected)"
        fi
        
        set -e

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy on all registry images
      run: |
        # Scan main tags from all registries
        TAGS=("latest" "386" "x64" "armv7")
        REGISTRIES=(
          "${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_IMAGE_NAME }}"
          "${{ env.REGISTRY_QUAY }}/${{ env.QUAY_IMAGE_NAME }}"
        )
        
        for registry in "${REGISTRIES[@]}"; do
          for tag in "${TAGS[@]}"; do
            echo "Scanning: $registry:$tag"
            docker run --rm aquasec/trivy:latest image \
              --format table \
              "${registry}:${tag}" || echo "Scan completed for ${registry}:${tag}"
          done
        done

  manifest:
    name: Create Architecture-Specific Manifests
    runs-on: ubuntu-latest
    needs: build-dockerhub-quay
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_QUAY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_TOKEN }}

    - name: Create architecture-specific manifests for both registries
      run: |
        # Function to create manifests for a registry
        create_manifests() {
          local registry=$1
          local image_name=$2
          
          echo "Creating manifests for $registry/$image_name"
          
          # Create manifest for each architecture tag
          docker manifest create $registry/$image_name:386 \
            $registry/$image_name:386
          
          docker manifest create $registry/$image_name:x64 \
            $registry/$image_name:x64
          
          docker manifest create $registry/$image_name:ppc64 \
            $registry/$image_name:ppc64
          
          docker manifest create $registry/$image_name:armv7 \
            $registry/$image_name:armv7
          
          docker manifest create $registry/$image_name:arm \
            $registry/$image_name:arm

          # Push manifests
          docker manifest push $registry/$image_name:386
          docker manifest push $registry/$image_name:x64
          docker manifest push $registry/$image_name:ppc64
          docker manifest push $registry/$image_name:armv7
          docker manifest push $registry/$image_name:arm
        }

        # Create manifests for both registries
        create_manifests "${{ env.REGISTRY_DOCKERHUB }}" "${{ env.DOCKERHUB_IMAGE_NAME }}"
        create_manifests "${{ env.REGISTRY_QUAY }}" "${{ env.QUAY_IMAGE_NAME }}"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          Dockerfile
          nginx.conf
          README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-ghcr, build-dockerhub-quay, verify, scan]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Build Summary
      run: |
        echo "üéâ Multi-architecture OpenResty build completed!"
        echo ""
        echo "üì¶ Available Registries and Tags:"
        echo ""
        echo "üöÄ Docker Hub:"
        echo "   ‚Ä¢ garfieldwtf/openresty:latest    (multi-arch)"
        echo "   ‚Ä¢ garfieldwtf/openresty:386       (32-bit Intel/AMD)"
        echo "   ‚Ä¢ garfieldwtf/openresty:x64       (64-bit Intel/AMD)" 
        echo "   ‚Ä¢ garfieldwtf/openresty:ppc64     (PowerPC 64-bit)"
        echo "   ‚Ä¢ garfieldwtf/openresty:armv7     (ARMv7 devices)"
        echo "   ‚Ä¢ garfieldwtf/openresty:arm       (ARMv7 alias)"
        echo ""
        echo "üîÆ Quay.io:"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:latest"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:386"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:x64"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:ppc64"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:armv7"
        echo "   ‚Ä¢ quay.io/garfieldwtf/openresty:arm"
        echo ""
        echo "üìö GHCR (GitHub Container Registry):"
        echo "   ‚Ä¢ All tags including commits and branches"
        echo ""
        echo "‚ö° Version Information:"
        echo "   ‚Ä¢ OpenResty: ${{ env.OPENRESTY_VERSION }}"
        echo "   ‚Ä¢ Nginx: ${{ env.NGINX_VERSION }}"
        echo ""
        echo "üîç Usage Examples:"
        echo "   docker pull garfieldwtf/openresty:386"
        echo "   docker pull quay.io/garfieldwtf/openresty:ppc64"
        echo "   docker run --platform linux/386 garfieldwtf/openresty:386"
        echo ""
        echo "üåê Multi-Arch Usage:"
        echo "   docker pull garfieldwtf/openresty:latest  # Automatically picks correct architecture"
